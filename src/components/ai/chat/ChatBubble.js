// Generated by GitHub Copilot

'use client';

import React from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm'

/**
 * チャットメッセージコンポーネント
 * @param {Object} props コンポーネントプロパティ
 * @param {string} props.role メッセージの役割 ('user' | 'assistant')
 * @param {string} props.content メッセージの内容 (Markdown形式対応)
 * @param {string} props.model 使用したAIモデル（assistantの場合のみ）
 * @param {string} props.formattedTime フォーマット済みの日時文字列
 * @returns {JSX.Element} チャットメッセージコンポーネント
 */
const ChatBubble = ({ role, content, model, formattedTime }) => {
  const isUser = role === 'user';
  
  return (
    <div className={`flex w-full ${isUser ? 'justify-end' : 'justify-start'} mb-4`}>
      <div className="flex flex-col max-w-[80%]">
        {/* メッセージ本文 - Markdown形式に対応 */}
        <div 
          className={`p-3 rounded-lg ${
            isUser 
              ? 'bg-blue-500 text-white rounded-br-none' 
              : 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-bl-none'
          }`}
        >
          <ReactMarkdown
            remarkPlugins={[remarkGfm]}
            components={{
              // 段落のスタイル設定
              p: ({ node, ...props }) => <p className="whitespace-pre-wrap" {...props} />,
              // リンクは新しいタブで開く
              a: ({ node, ...props }) => (
                <a {...props} target="_blank" rel="noopener noreferrer" className="underline text-blue-400 hover:text-blue-600" />
              ),
              // 見出しのスタイル
              h1: ({ node, ...props }) => <h1 {...props} className="text-xl font-bold my-2" />,
              h2: ({ node, ...props }) => <h2 {...props} className="text-lg font-bold my-2" />,
              h3: ({ node, ...props }) => <h3 {...props} className="text-md font-bold my-1" />,
              // リストのスタイル
              ul: ({ node, ...props }) => <ul {...props} className="list-disc ml-6 my-2" />,
              ol: ({ node, ...props }) => <ol {...props} className="list-decimal ml-6 my-2" />,
              // コードブロックのスタイル
              code: ({ node, inline, ...props }) => 
                inline ? (
                  <code {...props} className="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded text-sm" />
                ) : (
                  <code {...props} className="block bg-gray-100 dark:bg-gray-800 p-2 rounded my-2 text-sm overflow-x-auto" />
                ),
              // 引用のスタイル
              blockquote: ({ node, ...props }) => (
                <blockquote {...props} className="border-l-4 border-gray-300 dark:border-gray-500 pl-4 italic my-2" />
              ),
              // 水平線のスタイル
              hr: ({ node, ...props }) => (
                <hr 
                  {...props} 
                  className="border-0 h-px my-4 bg-gray-300 dark:bg-gray-500" 
                  aria-label="区切り線"
                />
              ),
              // 表のスタイル
              table: ({ node, ...props }) => (
                <div className="overflow-x-auto my-4">
                  <table {...props} className="min-w-full border-collapse border border-gray-300 dark:border-gray-600" />
                </div>
              ),
              thead: ({ node, ...props }) => (
                <thead {...props} className="bg-gray-100 dark:bg-gray-800" />
              ),
              tbody: ({ node, ...props }) => (
                <tbody {...props} className="bg-white dark:bg-gray-900" />
              ),
              tr: ({ node, ...props }) => (
                <tr {...props} className="border-b border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800" />
              ),
              th: ({ node, ...props }) => (
                <th {...props} className="border border-gray-300 dark:border-gray-600 px-4 py-2 text-left font-bold" />
              ),
              td: ({ node, ...props }) => (
                <td {...props} className="border border-gray-300 dark:border-gray-600 px-4 py-2" />
              ),
            }}
          >
            {content}
          </ReactMarkdown>
        </div>
        
        {/* メッセージのメタデータ（日時情報とAIの場合はモデル情報） */}
        <div className={`flex flex-col text-xs text-gray-500 dark:text-gray-400 mt-1 ${isUser ? 'items-end mr-1' : 'items-start ml-1'}`}>
          {/* AIメッセージの場合、使用したモデル情報も表示 */}
          {!isUser && model && (
            <span className="mb-0.5" aria-label="使用AIモデル">
              {model}
            </span>
          )}
          {/* 日時情報を表示 */}
          <span aria-label="メッセージ送信時刻">
            {formattedTime}
          </span>
        </div>
      </div>
    </div>
  );
};

export default ChatBubble;