// Generated by GitHub Copilot

import { useState, useEffect } from 'react';
import { useLocalStorage } from '@/hooks/useLocalStorage';

/**
 * ローカルストレージのAPIキー保存キー
 * @type {string}
 */
const OPENAI_API_KEY_STORAGE_KEY = 'openai_api_key';

/**
 * OpenAI APIキー入力コンポーネント
 * @param {Object} props コンポーネントのプロパティ
 * @param {Function} props.onApiKeyChange APIキーが変更された時のコールバック関数
 * @returns {JSX.Element} APIキー入力コンポーネント
 */
export default function APIKeyInput({ onApiKeyChange }) {
  // useLocalStorageフックを使用してAPIキーを管理
  const [storedApiKey, setStoredApiKey, removeStoredApiKey] = useLocalStorage(OPENAI_API_KEY_STORAGE_KEY, '');
  
  const [apiKey, setApiKey] = useState('');
  const [isVisible, setIsVisible] = useState(false);
  const [isSaved, setIsSaved] = useState(false);
  // 設定パネルの表示/非表示状態
  const [isExpanded, setIsExpanded] = useState(false);

  // 初期表示時にローカルストレージからAPIキーを読み込む
  useEffect(() => {
    if (storedApiKey) {
      setApiKey(storedApiKey);
      setIsSaved(true);
      // 親コンポーネントに通知
      if (onApiKeyChange) {
        onApiKeyChange(storedApiKey);
      }
      // APIキーが既に設定されている場合は、デフォルトで設定パネルを閉じておく
      setIsExpanded(false);
    } else {
      // APIキーが設定されていない場合は、デフォルトで設定パネルを開いておく
      setIsExpanded(true);
    }
    // onApiKeyChangeを依存配列から削除し、マウント時にのみ実行されるようにする
  }, []);

  /**
   * APIキーを保存する
   */
  const handleSaveApiKey = () => {
    if (apiKey.trim()) {
      // useLocalStorageフックの関数を使用して保存
      setStoredApiKey(apiKey.trim());
      setIsSaved(true);
      // 親コンポーネントに通知
      if (onApiKeyChange) {
        onApiKeyChange(apiKey.trim());
      }
      // 保存後は設定パネルを閉じる
      setTimeout(() => setIsExpanded(false), 1000);
    }
  };

  /**
   * APIキーを削除する
   */
  const handleClearApiKey = () => {
    // useLocalStorageフックの関数を使用して削除
    removeStoredApiKey();
    setApiKey('');
    setIsSaved(false);
    setIsVisible(false);
    // 親コンポーネントに通知
    if (onApiKeyChange) {
      onApiKeyChange('');
    }
    // 削除後も設定パネルは開いたままにする
  };

  /**
   * APIキー入力の変更をハンドルする
   * @param {Event} e 入力イベント
   */
  const handleApiKeyChange = (e) => {
    setApiKey(e.target.value);
    setIsSaved(false);
  };

  /**
   * APIキーの表示/非表示を切り替える
   */
  const toggleVisibility = () => {
    setIsVisible(!isVisible);
  };

  /**
   * 設定パネルの表示/非表示を切り替える
   */
  const toggleExpanded = () => {
    setIsExpanded(!isExpanded);
  };

  return (
    <div className="mb-4">
      {/* 設定ボタン（常に表示） */}
      <button 
        onClick={toggleExpanded} 
        className={`flex items-center justify-between w-full px-4 py-2 text-left text-sm font-medium rounded-lg ${
          !isSaved
            ? 'bg-orange-100 text-orange-700 hover:bg-orange-200 dark:bg-orange-900/30 dark:text-orange-200 dark:hover:bg-orange-900/50'
            : 'bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700'
        } transition-colors`}
        aria-expanded={isExpanded}
        aria-controls="api-key-settings"
      >
        <span className="flex items-center">
          {isSaved ? (
            <>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
              </svg>
              OpenAI APIキー設定済み
            </>
          ) : (
            <>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 8a6 6 0 01-7.743 5.743L10 14l-1 1-1 1H6v-1l1-1 1-1-2.257-2.257A6 6 0 1118 8zm-6-4a1 1 0 100 2 2 2 0 012 2 1 1 0 102 0 4 4 0 00-4-4z" clipRule="evenodd" />
              </svg>
              OpenAI APIキーを設定してください
            </>
          )}
        </span>
        <svg className={`w-5 h-5 transition-transform ${isExpanded ? 'transform rotate-180' : ''}`} fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd"></path>
        </svg>
      </button>

      {/* 設定パネル（折りたたみ可能） */}
      {isExpanded && (
        <div 
          id="api-key-settings"
          className="mt-2 bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 transition-all duration-300"
        >
          <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
            AIチャット機能を使用するには、OpenAI APIキーが必要です。
            APIキーはお使いのブラウザに保存され、サーバーには送信されません。
          </p>
          <div className="flex items-center gap-2">
            <div className="relative flex-grow">
              <input
                type={isVisible ? 'text' : 'password'}
                value={apiKey}
                onChange={handleApiKeyChange}
                placeholder="sk-xxxxxxxxxxxxxxxxxxxx"
                className="w-full p-2 pr-10 border dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                aria-label="OpenAI APIキー"
              />
              <button
                type="button"
                onClick={toggleVisibility}
                className="absolute right-1 top-1/2 transform -translate-y-1/2 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 p-1 rounded-md"
                title={isVisible ? "キーを隠す" : "キーを表示"}
                aria-label={isVisible ? "キーを隠す" : "キーを表示"}
              >
                {isVisible ? (
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l18 18" />
                  </svg>
                ) : (
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                )}
              </button>
            </div>
            <button
              onClick={handleSaveApiKey}
              disabled={!apiKey.trim() || isSaved}
              className={`px-4 py-2 rounded-md ${
                !apiKey.trim() || isSaved
                  ? 'bg-gray-300 dark:bg-gray-600 cursor-not-allowed'
                  : 'bg-blue-600 hover:bg-blue-700 text-white'
              } transition-colors`}
              title="APIキーを保存"
              aria-label="APIキーを保存"
            >
              {isSaved ? '保存済' : '保存'}
            </button>
            {isSaved && (
              <button
                onClick={handleClearApiKey}
                className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md transition-colors"
                title="APIキーを削除"
                aria-label="APIキーを削除"
              >
                削除
              </button>
            )}
          </div>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
            セキュリティのため、APIキーはお使いのブラウザのローカルストレージに保存されます。
          </p>
        </div>
      )}
    </div>
  );
}