// Generated by GitHub Copilot

'use client';

import { useState, useRef, useEffect } from 'react';

/**
 * メッセージの最大文字数
 * @type {number}
 */
const MAX_MESSAGE_LENGTH = 2000;

/**
 * テキストエリアの高さを入力内容に合わせて自動調整するカスタムフック
 * @param {Object} ref テキストエリア要素への参照オブジェクト
 * @param {string} value テキストエリアの値
 * @returns {void}
 */
const useTextareaAutoHeight = (ref, value) => {
  useEffect(() => {
    if (ref.current) {
      ref.current.style.height = 'auto';
      ref.current.style.height = `${ref.current.scrollHeight}px`;
    }
  }, [ref, value]);
};

/**
 * チャット入力フォームコンポーネント
 * @param {Object} props コンポーネントプロパティ
 * @param {Function} props.onSend メッセージ送信時のコールバック関数
 * @param {boolean} props.isLoading ローディング状態
 * @param {string} props.selectedModel 現在選択されているモデル
 * @param {Function} props.onModelChange モデル変更時のコールバック関数
 * @param {Object|Array<string>} props.availableModels 利用可能なモデル一覧（オブジェクトまたは配列）
 * @param {number} props.contextWindowSize コンテキストウィンドウサイズ
 * @param {Function} props.onWindowSizeChange ウィンドウサイズ変更時のコールバック関数
 * @returns {JSX.Element} チャット入力フォームコンポーネント
 */
const ChatInput = ({ 
  onSend, 
  isLoading, 
  selectedModel, 
  onModelChange, 
  availableModels,
  contextWindowSize,
  onWindowSizeChange
}) => {
  const [message, setMessage] = useState('');
  const textareaRef = useRef(null);
  // IME入力の状態を追跡
  const [isImeComposing, setIsImeComposing] = useState(false);
  
  // テキストエリアの高さ自動調整にカスタムフックを使用
  useTextareaAutoHeight(textareaRef, message);
  
  /**
   * メッセージを送信する共通関数
   * @returns {boolean} 送信成功の場合はtrue
   */
  const sendMessage = () => {
    const trimmedMessage = message.trim();
    if (!trimmedMessage || isLoading) return false;
    
    onSend(trimmedMessage);
    setMessage('');
    return true;
  };
  
  /**
   * フォーム送信イベントを処理する
   * @param {Event} e イベントオブジェクト
   */
  const handleSubmit = (e) => {
    e.preventDefault();
    sendMessage();
  };
  
  /**
   * キーボードイベントを処理する
   * @param {KeyboardEvent} e キーボードイベントオブジェクト
   */
  const handleKeyDown = (e) => {
    // IME入力中またはキーコードが229（IME処理中）の場合は処理をスキップ
    if (isImeComposing || e.isComposing || e.keyCode === 229) {
      return;
    }
    
    // Enterキーのみの場合はメッセージを送信
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault(); // デフォルトの改行動作を防止
      sendMessage();
    }
    // Shift+Enterの場合は改行（デフォルト動作を許可）
  };
  
  /**
   * テキストエリアの変更イベントを処理する
   * @param {Event} e イベントオブジェクト
   */
  const handleMessageChange = (e) => {
    const newValue = e.target.value;
    // 最大文字数を超える場合は切り詰める
    if (newValue.length <= MAX_MESSAGE_LENGTH) {
      setMessage(newValue);
    } else {
      setMessage(newValue.slice(0, MAX_MESSAGE_LENGTH));
    }
  };
  
  /**
   * IME入力開始イベントを処理する
   */
  const handleCompositionStart = () => {
    setIsImeComposing(true);
  };
  
  /**
   * IME入力終了イベントを処理する
   */
  const handleCompositionEnd = () => {
    setIsImeComposing(false);
  };
  
  /**
   * ウィンドウサイズを変更する
   * @param {Event} e イベントオブジェクト
   */
  const handleWindowSizeChange = (e) => {
    const size = parseInt(e.target.value, 10);
    if (onWindowSizeChange && !isNaN(size) && size > 0) {
      onWindowSizeChange(size);
    }
  };
  
  // 送信ボタンの有効・無効状態
  const isSubmitDisabled = !message.trim() || isLoading;
  
  // 送信ボタンのスタイル
  const submitButtonClassNames = `p-2 rounded-lg ${
    isSubmitDisabled
      ? 'bg-gray-300 text-gray-500 cursor-not-allowed dark:bg-gray-700 dark:text-gray-400'
      : 'bg-blue-500 text-white hover:bg-blue-600 focus:ring-2 focus:ring-blue-400'
  }`;
  
  // 入力済み文字数を計算
  const currentCharCount = message.length;
  // 文字数が多くなってきたらスタイルを変更する
  const charCountClass = 
    currentCharCount >= MAX_MESSAGE_LENGTH - 50 
      ? 'text-red-500 dark:text-red-400' 
      : currentCharCount >= MAX_MESSAGE_LENGTH - 200 
        ? 'text-amber-500 dark:text-amber-400' 
        : 'text-gray-500 dark:text-gray-400';
  
  // ウィンドウサイズのオプション
  const windowSizeOptions = [5, 10, 15, 20];
  
  return (
    <form onSubmit={handleSubmit} className="flex flex-col mt-4 border-t pt-4 dark:border-gray-700">
      <div className="relative flex-1">
        <textarea
          ref={textareaRef}
          value={message}
          onChange={handleMessageChange}
          onKeyDown={handleKeyDown}
          onCompositionStart={handleCompositionStart}
          onCompositionEnd={handleCompositionEnd}
          placeholder="メッセージを入力してください..."
          className="w-full p-3 pr-12 border rounded-lg resize-none max-h-32 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white"
          rows={1}
          disabled={isLoading}
          aria-label="メッセージ入力欄（Enterで送信、Shift+Enterで改行）"
          maxLength={MAX_MESSAGE_LENGTH}
        />
        <div className="absolute right-2 bottom-3">
          {/* 送信ボタン */}
          <button
            type="submit"
            disabled={isSubmitDisabled}
            className={submitButtonClassNames}
            aria-label="メッセージを送信"
            title="メッセージを送信（Enter）"
          >
            {isLoading ? (
              <svg className="w-5 h-5 animate-spin" viewBox="0 0 24 24" aria-hidden="true">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            ) : (
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
              </svg>
            )}
          </button>
        </div>
      </div>
      
      {/* 文字数カウンター - 右寄せ */}
      <div className="flex justify-end mb-1">
        <span className={`text-xs ${charCountClass}`}>
          文字数: {currentCharCount} / {MAX_MESSAGE_LENGTH}
        </span>
      </div>
      
      <div className="flex flex-wrap justify-between items-center w-full gap-2">
        {/* 入力ヒント - 左寄せ */}
        <div className="flex items-center">
          <span className="text-xs text-gray-500 dark:text-gray-400 hidden md:inline">
            <kbd className="px-2 py-1 bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded">Enter</kbd> 送信 / 
            <kbd className="px-2 py-1 bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded ml-1">Shift+Enter</kbd> 改行
          </span>
        </div>
        
        {/* 設定部分 - 右寄せ */}
        <div className="flex flex-wrap justify-end w-full md:w-auto gap-3 ml-auto">
          {/* ウィンドウサイズ選択 */}
          <div className="flex items-center justify-end">
            <label htmlFor="window-size-select" className="mr-2 text-sm text-gray-700 dark:text-gray-300 whitespace-nowrap">
              サイズ:
            </label>
            <select
              id="window-size-select"
              value={contextWindowSize}
              onChange={handleWindowSizeChange}
              className="block px-1 py-0.5 text-sm border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
              disabled={isLoading}
              aria-label="コンテキストウィンドウサイズを選択"
              title="AIに送信する過去のメッセージ数を選択"
            >
              {windowSizeOptions.map((size) => (
                <option key={size} value={size}>
                  {size}件
                </option>
              ))}
            </select>
          </div>
          
          {/* モデル選択 */}
          <div className="flex items-center justify-end">
            <label htmlFor="model-select" className="mr-2 text-sm text-gray-700 dark:text-gray-300 whitespace-nowrap">
              モデル:
            </label>
            <select
              id="model-select"
              value={selectedModel}
              onChange={(e) => onModelChange(e.target.value)}
              className="block px-1 py-0.5 text-sm border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
              disabled={isLoading}
              aria-label="AIモデルを選択"
              title="リクエストの処理に使用するAIのモデルを選択"
            >
              {availableModels && Object.values(availableModels).map((model) => (
                <option key={model} value={model}>
                  {model}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>
    </form>
  );
};

export default ChatInput;