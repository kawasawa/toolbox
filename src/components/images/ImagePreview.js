// Generated by GitHub Copilot
'use client';

import NextImage from 'next/image';

/**
 * 画像プレビューコンポーネント
 * 元画像と処理後画像の表示、タブ切替、スライダー比較機能を提供
 */
export function ImagePreview({
  originalImage,
  processedImage,
  compareMode,
  setCompareMode,
  activeTab,
  setActiveTab,
  sliderPosition,
  sliderContainerRef,
  sliderHandleRef,
  format,
  compressionRatio,
  saveImage,
  copyImageToClipboard
}) {
  return (
    <section className="p-6 rounded-lg bg-white dark:bg-gray-800 shadow-md">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">プレビュー</h2>
        
        {/* 表示もオード切替ラジオボタン */}
        {processedImage && (
          <div className="flex items-center">
            <div className="flex space-x-3">
              <div className="flex items-center">
                <input
                  id="tab-mode"
                  type="radio"
                  name="compare-mode"
                  value="tab"
                  checked={compareMode === 'tab'}
                  onChange={() => setCompareMode('tab')}
                  className="w-4 h-4 text-blue-500 focus:ring-blue-500 focus:ring-2"
                />
                <label
                  htmlFor="tab-mode"
                  className="ml-1 text-sm font-medium text-gray-700 dark:text-gray-300"
                >
                  タブ切替
                </label>
              </div>
              <div className="flex items-center">
                <input
                  id="slider-mode"
                  type="radio"
                  name="compare-mode"
                  value="slider"
                  checked={compareMode === 'slider'}
                  onChange={() => setCompareMode('slider')}
                  className="w-4 h-4 text-blue-500 focus:ring-blue-500 focus:ring-2"
                />
                <label
                  htmlFor="slider-mode"
                  className="ml-1 text-sm font-medium text-gray-700 dark:text-gray-300"
                >
                  スライダー比較
                </label>
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* タブ切替ボタン - スライダーモードでない場合に表示 */}
      {processedImage && compareMode === 'tab' && (
        <div className="flex border-b mb-4">
          <button
            onClick={() => setActiveTab('original')}
            className={`px-4 py-2 font-medium text-sm focus:outline-none ${
              activeTab === 'original' 
                ? 'border-b-2 border-blue-500 text-blue-600 dark:text-blue-400'
                : 'text-gray-600 dark:text-gray-400 hover:text-gray-500'
            }`}
          >
            元の画像
          </button>
          <button
            onClick={() => setActiveTab('processed')}
            className={`px-4 py-2 font-medium text-sm focus:outline-none ${
              activeTab === 'processed' 
                ? 'border-b-2 border-blue-500 text-blue-600 dark:text-blue-400'
                : 'text-gray-600 dark:text-gray-400 hover:text-gray-500'
            }`}
          >
            処理後の画像
          </button>
        </div>
      )}
      
      {/* 画像表示エリア */}
      <div className="relative overflow-hidden rounded-md bg-gray-100 dark:bg-gray-700" style={{ minHeight: '300px' }}>
        {/* タブ表示モード */}
        {compareMode === 'tab' && (
          <div className="p-4">
            {activeTab === 'original' ? (
              <div className="flex items-center justify-center relative h-full min-h-[300px]">
                <NextImage 
                  src={originalImage.url} 
                  alt="元の画像" 
                  width={originalImage.width}
                  height={originalImage.height}
                  unoptimized={true}
                  className="max-w-full max-h-[300px] mx-auto object-contain transition-opacity duration-200"
                />
              </div>
            ) : processedImage ? (
              <div className="flex items-center justify-center relative h-full min-h-[300px]">
                <NextImage 
                  src={processedImage.url} 
                  alt="処理後の画像" 
                  width={processedImage.width}
                  height={processedImage.height}
                  unoptimized={true}
                  className="max-w-full max-h-[300px] mx-auto object-contain transition-opacity duration-200"
                />
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-[400px]">
                <p className="text-center text-gray-500 dark:text-gray-400">
                  画像を処理するとここに表示されます
                </p>
              </div>
            )}
          </div>
        )}
        
        {/* スライダー表示モード */}
        {compareMode === 'slider' && processedImage && (
          <div 
            ref={sliderContainerRef}
            className="relative h-full min-h-[300px] select-none"
            style={{ touchAction: 'none' }} // タッチデバイスでのスクロール防止
          >
            {/* 処理後の画像 - 常に全体を表示 */}
            <NextImage 
              src={processedImage.url} 
              alt="処理後の画像" 
              width={processedImage.width}
              height={processedImage.height}
              unoptimized={true}
              className="absolute top-0 left-0 w-full h-full object-contain p-4"
            />
            
            {/* 元の画像 - スライダー位置に応じて一部だけ表示 */}
            <div 
              className="absolute top-0 left-0 h-full overflow-hidden"
              style={{ width: `${sliderPosition}%` }}
            >
              <NextImage 
                src={originalImage.url} 
                alt="元の画像" 
                width={originalImage.width}
                height={originalImage.height}
                unoptimized={true}
                className="absolute top-0 left-0 w-full h-full object-contain p-4"
                style={{
                  width: `${100 / (sliderPosition / 100)}%`, // スライダー位置に応じて画像の表示幅を調整
                  maxWidth: 'none'
                }}
              />
            </div>
            
            {/* スライダーハンドル */}
            <div 
              ref={sliderHandleRef}
              className="absolute top-0 bottom-0 w-1 bg-white cursor-ew-resize shadow-md"
              style={{ 
                left: `calc(${sliderPosition}% - 2px)`,
                zIndex: 10
              }}
            >
              {/* ドラッグハンドル */}
              <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 rounded-full bg-white shadow-lg flex items-center justify-center cursor-ew-resize">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 9l4-4 4 4m0 6l-4 4-4-4" />
                </svg>
              </div>
            </div>
            
            {/* ラベル位置を修正 */}
            <div className="absolute bottom-2 left-2 px-2 py-1 bg-black bg-opacity-70 text-white text-xs rounded">
              元の画像
            </div>
            <div className="absolute bottom-2 right-2 px-2 py-1 bg-black bg-opacity-70 text-white text-xs rounded">
              処理後の画像
            </div>
          </div>
        )}
      </div>
      
      {/* 画像情報表示 - 表形式 */}
      <div className="mt-4 overflow-x-auto">
        <table className="w-full text-sm text-gray-600 dark:text-gray-300 border-collapse">
          <thead>
            <tr className="border-b border-gray-300 dark:border-gray-700">
              <th className="py-2 px-3 text-left font-medium"></th>
              <th className="py-2 px-3 text-left font-medium">処理前</th>
              <th className="py-2 px-3 text-left font-medium">処理後</th>
              <th className="py-2 px-3 text-left font-medium">変更</th>
            </tr>
          </thead>
          <tbody>
            {/* サイズ（寸法）情報 */}
            <tr className="border-b border-gray-200 dark:border-gray-800">
              <td className="py-2 px-3 font-medium">サイズ</td>
              <td className="py-2 px-3">{originalImage.width} x {originalImage.height} px</td>
              <td className="py-2 px-3">
                {processedImage ? `${processedImage.width} x ${processedImage.height} px` : '-'}
              </td>
              <td className="py-2 px-3">
                {processedImage && (
                  <>
                    {processedImage.pixelReduction && parseFloat(processedImage.pixelReduction) > 0 ? (
                      <span className="text-green-500 dark:text-green-400">
                        {processedImage.pixelReduction}% 削減
                      </span>
                    ) : processedImage.pixelReduction && parseFloat(processedImage.pixelReduction) < 0 ? (
                      <span className="text-yellow-500 dark:text-yellow-400">
                        {Math.abs(parseFloat(processedImage.pixelReduction))}% 増加
                      </span>
                    ) : (
                      <span>なし</span>
                    )}
                  </>
                )}
              </td>
            </tr>
            
            {/* ファイルサイズ */}
            <tr className="border-b border-gray-200 dark:border-gray-800">
              <td className="py-2 px-3 font-medium">容量</td>
              <td className="py-2 px-3">
                {originalImage.fileSize ? `${originalImage.fileSize} KB` : '不明'}
              </td>
              <td className="py-2 px-3">
                {processedImage ? `${processedImage.fileSize} KB` : '-'}
              </td>
              <td className="py-2 px-3">
                {processedImage && (
                  <>
                    {parseFloat(compressionRatio) > 0 ? (
                      <span className="text-green-500 dark:text-green-400">
                        {compressionRatio}% 削減
                      </span>
                    ) : parseFloat(compressionRatio) < 0 ? (
                      <span className="text-yellow-500 dark:text-yellow-400">
                        {Math.abs(parseFloat(compressionRatio))}% 増加
                      </span>
                    ) : (
                      <span>なし</span>
                    )}
                  </>
                )}
              </td>
            </tr>
            
            {/* ファイル形式 */}
            <tr className="border-b border-gray-200 dark:border-gray-800">
              <td className="py-2 px-3 font-medium">形式</td>
              <td className="py-2 px-3">{originalImage.type}</td>
              <td className="py-2 px-3">
                {processedImage ? processedImage.type : '-'}
              </td>
              <td className="py-2 px-3">
                {processedImage && (originalImage.type !== processedImage.type ? (
                  <span className="font-bold">
                    あり
                  </span>
                ) : (
                  <span>なし</span>
                ))}
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      
      {/* 処理後の画像のダウンロードボタンとクリップボードコピーボタン */}
      {processedImage && (
        <div className="mt-4 flex justify-center space-x-4">
          <button
            onClick={() => saveImage(processedImage, format)}
            className="px-5 py-2 rounded-md bg-blue-500 hover:bg-blue-600 text-white font-medium focus:outline-none flex items-center"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
            </svg>
            ダウンロード
          </button>
          
          {/* すべての形式でボタンを表示し、PNG形式以外では非活性にする */}
          <button
            onClick={() => copyImageToClipboard(processedImage)}
            disabled={processedImage.type !== 'image/png'}
            className={`px-5 py-2 rounded-md flex items-center ${
              processedImage.type === 'image/png'
                ? 'bg-green-500 hover:bg-green-600 text-white'
                : 'bg-gray-300 text-gray-500 cursor-not-allowed'
            } font-medium focus:outline-none`}
            title={processedImage.type !== 'image/png' ? 'クリップボードへのコピーはPNG形式のみ対応しています' : ''}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
            </svg>
            クリップボードにコピー
          </button>
        </div>
      )}
    </section>
  );
}