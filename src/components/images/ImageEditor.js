// Generated by GitHub Copilot
'use client';

/**
 * 画像編集設定コンポーネント
 * 画像のサイズ変更、フォーマット変換、品質設定などの編集オプションを提供
 */
export function ImageEditor({
  isProcessing,
  dimensions,
  setDimensions,
  format,
  setFormat,
  compressionQuality,
  setCompressionQuality,
  processImage,
  isCompressibleFormat,
  originalImage // 元画像情報を受け取るように追加
}) {
  /**
   * Enterキー押下時に画像処理を実行するハンドラ
   * @param {React.KeyboardEvent} event キーボードイベント
   */
  const handleKeyDown = (event) => {
    // Enterキーが押された場合
    if (event.key === 'Enter') {
      // 少なくともどちらかの入力欄に値が入力されていれば処理を実行
      if (dimensions.width || dimensions.height) {
        processImage();
      }
    }
  };

  return (
    <section className="p-6 rounded-lg bg-white dark:bg-gray-800 shadow-md relative">
      {/* 処理中のオーバーレイ */}
      {isProcessing && (
        <div className="absolute inset-0 bg-white/70 dark:bg-gray-800/70 flex items-center justify-center z-10 rounded-lg">
          <div className="flex flex-col items-center">
            <div className="animate-spin w-12 h-12 border-4 border-green-500 rounded-full border-t-transparent mb-3"></div>
            <p className="text-green-600 dark:text-green-400 font-medium">画像を処理しています...</p>
          </div>
        </div>
      )}
      
      <h2 className="text-xl font-semibold mb-4">画像の編集</h2>
      
      <div className="space-y-6">
        {/* サイズ変更 */}
        <div>
          <h3 className="font-medium mb-2 text-gray-700 dark:text-gray-300">
            サイズの変更
          </h3>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block mb-1 text-sm text-gray-600 dark:text-gray-400">
                幅 (px)
              </label>
              <input 
                type="number"
                min="1"
                value={dimensions.width}
                onChange={(e) => setDimensions({...dimensions, width: e.target.value})}
                placeholder={originalImage ? `${originalImage.width}` : "元画像の幅"}
                onKeyDown={handleKeyDown}
                className="w-full p-2 rounded-md border bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white"
                disabled={isProcessing}
              />
            </div>
            <div>
              <label className="block mb-1 text-sm text-gray-600 dark:text-gray-400">
                高さ (px)
              </label>
              <input 
                type="number"
                min="1"
                value={dimensions.height}
                onChange={(e) => setDimensions({...dimensions, height: e.target.value})}
                placeholder={originalImage ? `${originalImage.height}` : "元画像の高さ"}
                onKeyDown={handleKeyDown}
                className="w-full p-2 rounded-md border bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white"
                disabled={isProcessing}
              />
            </div>
          </div>
          <p className="text-xs mt-2 text-gray-500 dark:text-gray-400">
            幅または高さのいずれかを空欄にすると、アスペクト比が維持されます。
          </p>
        </div>
        
        {/* ファイル形式 */}
        <div>
          <h3 className="font-medium mb-2 text-gray-700 dark:text-gray-300">ファイル形式</h3>
          <div className="grid grid-cols-3 md:grid-cols-5 gap-2">
            {['png', 'jpg', 'webp', 'gif', 'ico'].map((fmt) => (
              <button
                key={fmt}
                onClick={() => setFormat(fmt)}
                disabled={isProcessing}
                className={`
                  p-2 rounded-md text-center transition-colors
                  ${isProcessing ? 'cursor-not-allowed' : ''}
                  ${format === fmt
                    ? 'bg-blue-100 dark:bg-blue-600 text-blue-800 dark:text-white'
                    : 'bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600'
                  }
                `}
              >
                {fmt.toUpperCase()}
              </button>
            ))}
          </div>
        </div>

        {/* 画像の圧縮 - JPGまたはWEBP形式の場合のみ表示 */}
        {isCompressibleFormat && (
          <div>
            <h3 className="font-medium mb-2 text-gray-700 dark:text-gray-300">
              画像の圧縮（{format.toUpperCase()}形式）
            </h3>
            
            <div className="mt-3">
              <div className="flex justify-between items-center mb-1">
                <label className="text-sm text-gray-600 dark:text-gray-400">
                  品質: {compressionQuality}%
                </label>
              </div>
              <input 
                type="range"
                min="1"
                max="100"
                step="1"
                value={compressionQuality}
                onChange={(e) => setCompressionQuality(parseInt(e.target.value))}
                className="w-full h-2 rounded-lg appearance-none cursor-pointer bg-gray-300 dark:bg-gray-600 accent-blue-500"
              />
              <div className="flex justify-between text-xs mt-1">
                <span className="text-gray-500 dark:text-gray-400">低容量</span>
                <span className="text-gray-500 dark:text-gray-400">高画質</span>
              </div>
            </div>
            
            <p className="text-xs mt-2 text-gray-500 dark:text-gray-400">
              品質が100%の場合、圧縮処理は行われません。品質を下げるほどファイルサイズは小さくなりますが、画質も低下します。
            </p>
          </div>
        )}

        {/* 処理実行ボタン */}
        <div className="mt-6 flex justify-center">
          <button
            onClick={processImage}
            disabled={isProcessing}
            className={`px-6 py-2 rounded-md ${
              isProcessing 
                ? 'bg-gray-400 cursor-not-allowed' 
                : 'bg-blue-500 hover:bg-blue-600'
            } text-white font-medium focus:outline-none flex items-center`}
          >
            {isProcessing ? (
              <>
                <svg className="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                処理中...
              </>
            ) : (
              <>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                画像を処理する
              </>
            )}
          </button>
        </div>
      </div>
    </section>
  );
}