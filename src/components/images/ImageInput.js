// Generated by GitHub Copilot
'use client';

import { useRef } from 'react';

/**
 * 画像入力コンポーネント
 * ファイル選択、URL入力、クリップボードからの画像読み込みを提供
 */
export function ImageInput({
  imageUrl,
  setImageUrl,
  isLoading,
  loadImageFromFile,
  loadImageFromUrl,
  loadImageFromClipboard
}) {
  const fileInputRef = useRef(null);
  const dropZoneRef = useRef(null);

  /**
   * ファイル選択ダイアログを開く
   */
  const openFileDialog = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  /**
   * ドラッグアンドドロップハンドラー
   */
  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (dropZoneRef.current) {
      dropZoneRef.current.classList.add('border-blue-500');
    }
  };

  /**
   * ドラッグリーブハンドラー
   */
  const handleDragLeave = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (dropZoneRef.current) {
      dropZoneRef.current.classList.remove('border-blue-500');
    }
  };

  /**
   * ドロップハンドラー
   */
  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (dropZoneRef.current) {
      dropZoneRef.current.classList.remove('border-blue-500');
    }
    // ドロップされたファイルを取得
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      loadImageFromFile(e.dataTransfer.files[0]);
    }
  };

  return (
    <section className="mb-8 p-6 rounded-lg bg-white dark:bg-gray-800 shadow-md relative">
      {/* 読み込み中のオーバーレイ */}
      {isLoading && (
        <div className="absolute inset-0 bg-white/70 dark:bg-gray-800/70 flex items-center justify-center z-10 rounded-lg">
          <div className="flex flex-col items-center">
            <div className="animate-spin w-12 h-12 border-4 border-blue-500 rounded-full border-t-transparent mb-3"></div>
            <p className="text-blue-600 dark:text-blue-400 font-medium">画像を読み込んでいます...</p>
          </div>
        </div>
      )}
      
      <h2 className="text-xl font-semibold mb-4">画像の指定</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-4">
          <div>
            <div className="flex">
              <input 
                type="text"
                value={imageUrl}
                onChange={(e) => setImageUrl(e.target.value)}
                placeholder="URLから画像を読み込む"
                className="flex-1 p-2 rounded-l-md border bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white"
                disabled={isLoading}
              />
              <button 
                onClick={() => loadImageFromUrl(imageUrl)}
                disabled={isLoading || !imageUrl}
                className={`px-4 py-2 rounded-r-md transition-colors duration-200 ${
                  isLoading || !imageUrl
                    ? 'bg-gray-400 cursor-not-allowed' 
                    : 'bg-blue-500 hover:bg-blue-600'
                } text-white font-medium focus:outline-none`}
              >
                {isLoading ? (
                  <div className="flex items-center">
                    <div className="w-4 h-4 border-2 border-white rounded-full border-t-transparent animate-spin mr-2"></div>
                    読込中
                  </div>
                ) : '読込'}
              </button>
            </div>
          </div>
          
          <button 
            onClick={loadImageFromClipboard}
            disabled={isLoading}
            className={`w-full p-2 rounded-md transition-colors duration-200 ${
              isLoading 
                ? 'bg-gray-300 dark:bg-gray-600 cursor-not-allowed'
                : 'bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600'
            } font-medium focus:outline-none flex items-center justify-center`}
          >
            {isLoading ? (
              <div className="flex items-center">
                <div className="w-4 h-4 border-2 border-gray-500 dark:border-gray-300 rounded-full border-t-transparent animate-spin mr-2"></div>
                読込中...
              </div>
            ) : (
              <>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                </svg>
                クリップボードから貼り付ける
              </>
            )}
          </button>
        </div>
        <div 
          ref={dropZoneRef}
          className={`border-2 border-dashed p-8 rounded-lg flex flex-col items-center justify-center transition-colors ${
            isLoading 
              ? 'border-gray-300 dark:border-gray-600 cursor-wait' 
              : 'border-gray-300 hover:border-gray-400 dark:border-gray-600 dark:hover:border-gray-500 cursor-pointer'
          }`}
          onDragOver={isLoading ? null : handleDragOver}
          onDragLeave={isLoading ? null : handleDragLeave}
          onDrop={isLoading ? null : handleDrop}
          onClick={isLoading ? null : openFileDialog}
        >
          {isLoading ? (
            <div className="flex flex-col items-center">
              <div className="animate-spin w-10 h-10 border-4 border-blue-500 rounded-full border-t-transparent mb-3"></div>
              <p className="text-center text-blue-600 dark:text-blue-400 font-medium">画像を処理中...</p>
            </div>
          ) : (
            <>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mb-4 text-gray-500 dark:text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <p className="text-center">クリックしてファイルを選択<br/>または<br/>ここにドラッグ＆ドロップ</p>
            </>
          )}
          <input 
            type="file" 
            ref={fileInputRef}
            className="hidden"
            accept="image/*"
            onChange={(e) => e.target.files?.[0] && loadImageFromFile(e.target.files[0])}
            disabled={isLoading}
          />
        </div>
      </div>
    </section>
  );
}