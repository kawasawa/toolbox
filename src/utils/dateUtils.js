// Generated by GitHub Copilot

/**
 * 日時をフォーマットする関数
 * デフォルトでは日本語形式（YYYY/MM/DD HH:MM）で日時を整形します
 * 
 * @param {Date|string|number} date フォーマットする日時（Dateオブジェクト、ISO形式の文字列、またはタイムスタンプ）
 * @param {Object} options フォーマットオプション（Intl.DateTimeFormatのオプション）
 * @param {string} [options.locale='ja-JP'] ロケール
 * @param {string} [options.year='numeric'] 年の表示形式
 * @param {string} [options.month='2-digit'] 月の表示形式
 * @param {string} [options.day='2-digit'] 日の表示形式
 * @param {string} [options.hour='2-digit'] 時の表示形式
 * @param {string} [options.minute='2-digit'] 分の表示形式
 * @param {boolean} [options.hour12=false] 12時間制を使用するかどうか
 * @param {string} [options.second] 秒の表示形式（指定しない場合は表示しない）
 * @returns {string} フォーマットされた日時文字列
 * 
 * @example
 * // 基本的な使用法 - 現在時刻を「2025/05/06 14:30」形式で取得
 * formatDateTime(new Date());
 * 
 * @example
 * // ISO文字列から特定の日時をフォーマット
 * formatDateTime('2025-05-06T14:30:45Z');
 * 
 * @example
 * // カスタムオプション - 英語表記で秒を含める
 * formatDateTime(new Date(), {
 *   locale: 'en-US',
 *   second: '2-digit'
 * }); // "05/06/2025, 02:30:45 PM"
 * 
 * @example
 * // 時刻のみのフォーマット
 * formatDateTime(new Date(), {
 *   year: undefined,
 *   month: undefined,
 *   day: undefined
 * }); // "14:30"
 */
export function formatDateTime(date, options = {}) {
  // 日付オブジェクト以外の場合、Dateオブジェクトに変換
  const dateObj = date instanceof Date ? date : new Date(date);
  
  // 無効な日付の場合はエラーメッセージを返す
  if (isNaN(dateObj.getTime())) {
    console.error('無効な日付が指定されました:', date);
    return '無効な日付';
  }
  
  // デフォルトのオプションとカスタムオプションをマージ
  const formatOptions = {
    locale: 'ja-JP',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    hour12: false,
    ...options
  };
  
  // ロケールを取得
  const { locale, ...dateTimeOptions } = formatOptions;
  
  // 有効なオプションだけをフィルタリング（undefinedの値を除外）
  const validOptions = Object.entries(dateTimeOptions)
    .filter(([_, value]) => value !== undefined)
    .reduce((obj, [key, value]) => {
      obj[key] = value;
      return obj;
    }, {});
  
  // Intl.DateTimeFormatを使用してフォーマット
  return new Intl.DateTimeFormat(locale, validOptions).format(dateObj);
}

/**
 * 相対的な時間表現を取得する関数
 * 「○分前」「昨日」などの形式で時間の差分を表現します
 *
 * @param {Date|string|number} date 対象の日時
 * @param {Date|string|number} [baseDate=new Date()] 比較の基準となる日時（デフォルトは現在時刻）
 * @param {string} [locale='ja-JP'] ロケール
 * @returns {string} 相対的な時間表現
 * 
 * @example
 * // 「3分前」のような表示
 * formatRelativeTime('2025-05-06T14:27:00Z', '2025-05-06T14:30:00Z');
 * 
 * @example
 * // 英語での表示（「3 minutes ago」）
 * formatRelativeTime('2025-05-06T14:27:00Z', '2025-05-06T14:30:00Z', 'en-US');
 */
export function formatRelativeTime(date, baseDate = new Date(), locale = 'ja-JP') {
  const dateObj = date instanceof Date ? date : new Date(date);
  const baseDateObj = baseDate instanceof Date ? baseDate : new Date(baseDate);
  
  // 無効な日付の場合はエラーメッセージを返す
  if (isNaN(dateObj.getTime()) || isNaN(baseDateObj.getTime())) {
    console.error('無効な日付が指定されました');
    return '無効な日付';
  }
  
  try {
    // RelativeTimeFormatが利用可能な環境であれば使用
    if (typeof Intl !== 'undefined' && Intl.RelativeTimeFormat) {
      const rtf = new Intl.RelativeTimeFormat(locale, { numeric: 'auto' });
      
      const diffInSeconds = Math.floor((dateObj - baseDateObj) / 1000);
      const diffInMinutes = Math.round(diffInSeconds / 60);
      const diffInHours = Math.round(diffInMinutes / 60);
      const diffInDays = Math.round(diffInHours / 24);
      
      // 差分に応じた適切な単位を選択
      if (Math.abs(diffInSeconds) < 60) {
        return rtf.format(diffInSeconds, 'second');
      } else if (Math.abs(diffInMinutes) < 60) {
        return rtf.format(diffInMinutes, 'minute');
      } else if (Math.abs(diffInHours) < 24) {
        return rtf.format(diffInHours, 'hour');
      } else if (Math.abs(diffInDays) < 30) {
        return rtf.format(diffInDays, 'day');
      } else {
        // 1ヶ月以上前の場合は通常の日付表示
        return formatDateTime(dateObj);
      }
    } else {
      // フォールバック: RelativeTimeFormatが使用できない環境では通常の日付表示
      return formatDateTime(dateObj);
    }
  } catch (error) {
    console.error('相対時間のフォーマットに失敗しました', error);
    return formatDateTime(dateObj);
  }
}