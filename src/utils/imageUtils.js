// Generated by GitHub Copilot

import EXIF from 'exif-js';

/**
 * HEIC形式かどうかを判定する
 * @param {File} file 画像ファイル
 * @returns {boolean} HEIC形式の場合はtrue
 */
export const isHeicImage = (file) => {
  // ファイル名や拡張子での判定
  const hasHeicExtension = file && 
    (file.name?.toLowerCase().endsWith('.heic') || 
     file.name?.toLowerCase().endsWith('.heif'));

  // MIMEタイプでの判定
  const hasHeicMimeType = file && 
    (file.type === 'image/heic' || 
     file.type === 'image/heif');

  // iPhoneからのHEICが時々image/jpegとして検出されることがあるため、
  // 実際のファイル名を優先して判断する
  return hasHeicExtension || hasHeicMimeType;
};

/**
 * HEIC画像をPNGに変換する
 * @param {File} file HEIC形式の画像ファイル
 * @returns {Promise<Blob>} PNG形式に変換されたBlob
 */
export const convertHeicToPng = async (file) => {
  try {      
    // ファイルタイプがimage/jpegなど、すでにブラウザで読み取り可能な場合は
    // 変換せずにそのまま返す（heic2any対策）
    if (file.type.startsWith('image/') && 
        !file.type.includes('heic') && 
        !file.type.includes('heif')) {
      console.log('Image is already browser readable:', file.type);
      return file;
    }
    
    // ダイナミックインポートでheic2anyを読み込む
    const heic2any = (await import('heic2any')).default;
    
    try {
      // HEIC画像をPNGに変換
      const pngBlob = await heic2any({
        blob: file,
        toType: 'image/png',
        quality: 0.9
      });
      
      // ファイル名を維持しつつ拡張子を変更
      const fileName = file.name.replace(/\.[^/.]+$/, '.png');
      return new File([pngBlob], fileName, { type: 'image/png' });
    } catch (error) {
      // heic2anyが「すでにブラウザで読み取り可能」エラーを出した場合は
      // 原因を表示してファイルをそのまま返す
      if (error.message && error.message.includes('browser readable')) {
        console.log('File appears to be HEIC by extension but is actually:', file.type);
        return file;
      }
      throw error;
    }
  } catch (error) {
    console.error('HEIC変換エラー:', error);
    throw new Error('HEIC形式の画像を変換できませんでした。');
  }
};

/**
 * 画像を圧縮する
 * @param {HTMLCanvasElement} canvas - 処理する画像を描画したキャンバス要素
 * @param {string} mimeType - 出力する画像のMIMEタイプ
 * @param {number} quality - 圧縮品質（0～1の範囲）
 * @returns {Promise<Blob>} 圧縮された画像のBlob
 */
export const compressImage = (canvas, mimeType, quality) => {
  return new Promise((resolve) => {
    canvas.toBlob((blob) => {
      resolve(blob);
    }, mimeType, quality);
  });
};

/**
 * EXIFデータを抽出する
 * @param {File|Blob} file 画像ファイルまたはBlob
 * @returns {Promise<Object|null>} EXIFデータを含むオブジェクト、またはデータが存在しない場合はnull
 */
export const extractExifData = (file) => {
  if (!file) return Promise.resolve(null);
  
  return new Promise((resolve) => {
    EXIF.getData(file, function() {
      const exifData = {};
      const allTags = EXIF.getAllTags(this);
      
      if (Object.keys(allTags).length === 0) {
        resolve(null);
        return;
      }

      // 一般的なEXIFタグ
      const commonTags = [
        'Make', 'Model', 'DateTime', 'ExposureTime', 'FNumber',
        'ISOSpeedRatings', 'ShutterSpeedValue', 'ApertureValue',
        'FocalLength', 'GPSLatitude', 'GPSLongitude'
      ];
      
      commonTags.forEach(tag => {
        if (allTags[tag] !== undefined) {
          exifData[tag] = allTags[tag];
        }
      });
      
      // その他のタグも追加
      Object.keys(allTags).forEach(tag => {
        if (!commonTags.includes(tag) && allTags[tag] !== undefined) {
          exifData[tag] = allTags[tag];
        }
      });
      
      resolve(exifData);
    });
  });
};
