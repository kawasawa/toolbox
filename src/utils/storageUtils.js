// Generated by GitHub Copilot

/**
 * ブラウザのローカルストレージの最大サイズ（バイト単位）
 * 多くのブラウザでは約5MBの制限がある
 * @type {number}
 */
export const LOCAL_STORAGE_MAX_SIZE = 5 * 1024 * 1024; // 5MB

/**
 * ローカルストレージに保存する推奨最大サイズ（バイト単位）
 * ブラウザの制限（5MB）に対して安全マージンを取って4MBに設定
 * @type {number}
 */
export const RECOMMENDED_STORAGE_SIZE = 4 * 1024 * 1024; // 4MB

/**
 * メッセージ数を制限する関数
 * @param {Array} messages メッセージの配列
 * @param {number} maxCount 最大メッセージ数
 * @returns {Array} 制限されたメッセージの配列
 */
export function limitMessageCount(messages, maxCount) {
  if (!Array.isArray(messages) || messages.length <= maxCount) {
    return messages;
  }
  
  // メッセージ数が制限を超える場合、最新のmaxCount個のメッセージを保持
  return messages.slice(-maxCount);
}

/**
 * データサイズに基づいてメッセージを制限する関数
 * 合計サイズが指定されたサイズを下回るまで、古いメッセージから削除する
 * @param {Array} messages メッセージの配列
 * @param {number} maxSizeBytes 最大サイズ（バイト単位）
 * @returns {Array} 制限されたメッセージの配列
 */
export function limitMessagesBySize(messages, maxSizeBytes) {
  if (!Array.isArray(messages) || messages.length === 0) {
    return messages;
  }
  
  // JSON文字列に変換してサイズを計算
  const messagesStr = JSON.stringify(messages);
  const totalSize = new Blob([messagesStr]).size;
  
  // サイズが制限内なら、そのまま返す
  if (totalSize <= maxSizeBytes) {
    return messages;
  }

  // サイズが制限を超える場合、古いメッセージから削除していく
  const limitedMessages = [...messages];
  let currentSize = totalSize;
  
  while (currentSize > maxSizeBytes && limitedMessages.length > 1) {
    // 最も古いメッセージを削除
    const oldestMessage = limitedMessages.shift();
    // 削除したメッセージのサイズを概算
    const oldestMessageSize = new Blob([JSON.stringify(oldestMessage)]).size;
    currentSize -= oldestMessageSize;
  }
  
  return limitedMessages;
}

/**
 * メッセージを保存するためのサイズ制限を適用する
 * メッセージ数とデータサイズの両方の制限を適用する
 * 1. まずメッセージ数の制限を適用し、古いメッセージを削除
 * 2. 次にデータサイズの制限を適用し、必要に応じて更に削除
 * 
 * @param {Array} messages メッセージの配列
 * @param {number} maxCount 最大メッセージ数
 * @param {number} maxSizeBytes 最大サイズ（バイト単位）
 * @returns {Object} 制限を適用した結果
 * @returns {Array} result.messages 制限適用後のメッセージ配列
 * @returns {Object} result.limitInfo 適用された制限の情報
 */
export function applyStorageLimits(messages, maxCount, maxSizeBytes) {
  // まずメッセージ数による制限を適用
  let limitedMessages = limitMessageCount(messages, maxCount);
  const countLimited = limitedMessages.length < messages.length;
  
  // 次にサイズによる制限を適用
  const beforeSizeLimitCount = limitedMessages.length;
  limitedMessages = limitMessagesBySize(limitedMessages, maxSizeBytes);
  const sizeLimited = limitedMessages.length < beforeSizeLimitCount;
  
  return {
    messages: limitedMessages,
    limitInfo: {
      countLimited,
      sizeLimited,
      originalCount: messages.length,
      resultCount: limitedMessages.length,
      removedCount: messages.length - limitedMessages.length
    }
  };
}

/**
 * ローカルストレージの使用量を計算する関数
 * @param {string} key ローカルストレージのキー
 * @returns {Object} 使用状況の情報
 * @returns {number} result.usedBytes 使用バイト数
 * @returns {number} result.maxBytes 最大バイト数（ブラウザの制限）
 * @returns {number} result.percentage 使用率（%）
 * @returns {boolean} result.isNearLimit 制限に近いかどうか（80%以上で真）
 */
export function calculateStorageUsage(key) {
  try {
    const item = localStorage.getItem(key);
    if (!item) {
      return {
        usedBytes: 0,
        maxBytes: LOCAL_STORAGE_MAX_SIZE,
        percentage: 0,
        isNearLimit: false
      };
    }
    
    // より正確なサイズ計算のためにBlobを使用
    const usedBytes = new Blob([item]).size;
    const percentage = (usedBytes / LOCAL_STORAGE_MAX_SIZE) * 100;
    const isNearLimit = percentage > 80;
    
    return {
      usedBytes,
      maxBytes: LOCAL_STORAGE_MAX_SIZE,
      percentage,
      isNearLimit
    };
  } catch (error) {
    console.error('ストレージ使用量計算エラー:', error);
    // エラー時はデフォルト値を返す
    return {
      usedBytes: 0,
      maxBytes: LOCAL_STORAGE_MAX_SIZE,
      percentage: 0,
      isNearLimit: false,
      error: error.message
    };
  }
}