// Generated by GitHub Copilot

/**
 * OpenAI関連のサービス
 * OpenAI APIとの通信を担当します
 */

/**
 * 利用可能なチャットモデル
 * @type {Object}
 */
export const CHAT_MODELS = {
  /**
   * GPT-4.1 Nano - 最も高速でコスト効率の良いモデル
   */
  GPT_4_1_NANO: 'gpt-4.1-nano',
  
  /**
   * GPT-4o Mini - バランスのとれた性能とコスト
   */
  GPT_4o_MINI: 'gpt-4o-mini',
};

/**
 * デフォルトのモデル
 * @type {string}
 */
export const DEFAULT_MODEL = CHAT_MODELS.GPT_4_1_NANO;

/**
 * API リクエストの温度パラメータ
 * @type {number}
 */
const DEFAULT_TEMPERATURE = 0.7;

/**
 * OpenAI API のエンドポイントURL
 * @type {string}
 */
const API_ENDPOINT = 'https://api.openai.com/v1/chat/completions';

/**
 * OpenAIのチャットAPIを呼び出す
 * @param {Array} messages メッセージの配列 [{role: string, content: string}]
 * @param {Object} options オプション
 * @param {string} [options.model=DEFAULT_MODEL] 使用するモデル
 * @param {number} [options.temperature=DEFAULT_TEMPERATURE] 温度パラメータ
 * @param {string} [options.apiKey] OpenAI APIキー（クライアントからの呼び出し用）
 * @returns {Promise<Object>} APIレスポンス
 */
export async function callChatCompletion(messages, options = {}) {
  const { 
    model = DEFAULT_MODEL, 
    temperature = DEFAULT_TEMPERATURE,
    apiKey
  } = options;
  
  // APIキーのチェック
  // クライアントから直接呼び出される場合はapiKeyが必要
  if (!apiKey) {
    throw new Error('APIキーが指定されていません');
  }

  try {
    const response = await fetch(API_ENDPOINT, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model,
        messages,
        temperature
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error?.message || `APIリクエストに失敗しました: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('OpenAI API エラー:', error);
    throw error;
  }
}