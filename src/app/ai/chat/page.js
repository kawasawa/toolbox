// Generated by GitHub Copilot

'use client';

import { useState, useRef, useEffect } from 'react';
import { toast } from 'react-hot-toast';
import { useChatConversation } from '@/hooks/ai/chat/useChatConversation';
import { useAdaptiveHeight } from '@/hooks/ai/chat/useAdaptiveHeight';
import ChatBubble from '@/components/ai/chat/ChatBubble';
import ChatInput from '@/components/ai/chat/ChatInput';
import APIKeyInput from '@/components/ai/chat/APIKeyInput';
import { MAX_TOKENS, DEFAULT_CONTEXT_WINDOW_SIZE } from '@/utils/tokenAnalyzer';

/**
 * ローカルストレージに保存する最大メッセージ数
 * @type {number}
 */
const MAX_STORED_MESSAGES = 100;

/**
 * AIチャットページコンポーネント
 * @returns {JSX.Element} AIチャットページコンポーネント
 */
export default function ChatPage() {
  // コンテキストウィンドウサイズの状態管理（デフォルト値を直接使用）
  const [contextWindowSize, setContextWindowSize] = useState(DEFAULT_CONTEXT_WINDOW_SIZE);
  // APIキー状態を管理
  const [apiKey, setApiKey] = useState('');
  
  // ref設定
  const messagesEndRef = useRef(null); // 新しいメッセージが追加されたときの自動スクロール用
  const chatContainerRef = useRef(null); // チャットコンテナのref
  
  // 適応的な高さを計算するカスタムフックを使用
  const containerHeight = useAdaptiveHeight({
    containerRef: chatContainerRef,
    bufferPx: 20, // ヘッダー・フッター・余白のための余裕
    minHeight: 300, // 最小高さ
  });

  // チャット関連のロジックをカスタムフックから取得（コンテキストウィンドウサイズとAPIキーを渡す）
  const { 
    messages, 
    isLoading, 
    sendMessage, 
    clearConversation,
    selectedModel,
    changeModel,
    availableModels,
    estimatedTokens,
    hasApiKey,
    storageInfo,
    setApiKey: updateApiKey
  } = useChatConversation({ 
    contextWindowSize, 
    maxTokens: MAX_TOKENS, 
    apiKey,
    maxStoredMessages: MAX_STORED_MESSAGES
  });
  
  /**
   * メッセージが更新されたら自動スクロール
   */
  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  };
  
  // メッセージが更新されたとき自動スクロール
  useEffect(() => {
    if (messages.length > 0) {
      scrollToBottom();
    }
  }, [messages]);
  
  /**
   * メッセージを送信する
   * @param {string} content メッセージ内容
   */
  const handleSendMessage = async (content) => {
    try {
      await sendMessage(content);
      // メッセージ送信後に自動スクロール
      setTimeout(scrollToBottom, 100);
    } catch (error) {
      toast.error(error.message || 'エラーが発生しました');
    }
  };

  /**
   * コンテキストウィンドウサイズを変更する
   * @param {number} size 新しいウィンドウサイズ
   */
  const handleWindowSizeChange = (size) => {
    setContextWindowSize(size);
  };

  /**
   * APIキーが変更された時のハンドラー
   * @param {string} newApiKey 新しいAPIキー
   */
  const handleApiKeyChange = (newApiKey) => {
    // APIキーの状態を更新
    setApiKey(newApiKey);
    updateApiKey(newApiKey);
  };
  
  return (
    <div className="flex flex-col h-full mx-auto max-w-6xl p-4">
      {/* ヘッダー部分 - 固定表示 */}
      <div className="sticky top-0 bg-gray-50 dark:bg-gray-900 z-10">
        <header className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4">
          <h1 className="text-2xl font-bold mb-2 sm:mb-0">AIチャット</h1>
          <div className="flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-4">
            <span className="text-sm text-gray-500 dark:text-gray-400" title="推定トークン使用量">
              トークン数 (概算): {estimatedTokens}
            </span>
            {/* ストレージ使用率とMB単位の使用量を表示 */}
            <span 
              className={`text-sm ${parseFloat(storageInfo.percentage) > 80 ? 'text-orange-500 dark:text-orange-400' : 'text-gray-500 dark:text-gray-400'}`} 
              title="ローカルストレージ使用率"
            >
              ストレージ使用率: {parseFloat(storageInfo.percentage).toFixed(1)}% ({(storageInfo.used / (1024 * 1024)).toFixed(2)}MB)
            </span>
            <button
              onClick={clearConversation}
              className="px-4 py-2 text-sm bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 rounded-md text-gray-700 dark:text-gray-200 transition-colors"
              title="会話履歴をクリア"
              aria-label="会話履歴をクリア"
            >
              会話をクリア
            </button>
          </div>
        </header>
        
        {/* APIキー入力コンポーネント - 固定表示 */}
        <div className="mb-4">
          <APIKeyInput onApiKeyChange={handleApiKeyChange} />
        </div>
      </div>
      
      {/* チャットコンテナ - 動的に計算された高さでスクロール可能 */}
      <div 
        ref={chatContainerRef}
        className="bg-white dark:bg-gray-900 rounded-lg shadow-md flex flex-col flex-grow"
        style={{ height: containerHeight, maxHeight: containerHeight }}
      >
        {/* メッセージ表示エリア - ここだけがスクロール可能 */}
        <div className="flex-1 overflow-y-auto p-4">
          {messages.length === 0 ? (
            <div className="flex items-center justify-center h-full">
              <div className="text-center text-gray-500 dark:text-gray-400">
                {hasApiKey ? (
                  <p>AIに質問してみましょう！</p>
                ) : (
                  <p>APIキーを設定してからAIに質問してみましょう</p>
                )}
                <p className="mt-2 text-sm">前の会話はブラウザに保存されます（最大{MAX_STORED_MESSAGES}件）</p>
              </div>
            </div>
          ) : (
            messages.map((msg, index) => (
              <ChatBubble 
                key={index} 
                role={msg.role} 
                content={msg.content} 
                model={msg.model}
                formattedTime={msg.formattedTime}
              />
            ))
          )}
          
          {/* AIの回答生成中プログレスインジケーター */}
          {isLoading && (
            <div className="flex flex-col items-start space-y-2 w-full max-w-[80%] mb-4" role="status" aria-live="polite">
              <div className="flex items-center text-sm text-gray-600 dark:text-gray-300">
                <div className="mr-2 h-4 w-4">
                  <svg className="animate-spin h-full w-full text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                </div>
                <span>AIが回答を生成中です...</span>
              </div>
            </div>
          )}
          
          {/* 自動スクロール用の参照ポイント */}
          <div ref={messagesEndRef} />
        </div>
        
        {/* メッセージ入力エリア - 常に表示 */}
        <div className="sticky bottom-0 bg-white dark:bg-gray-900">
          <ChatInput 
            onSend={handleSendMessage} 
            isLoading={isLoading} 
            selectedModel={selectedModel}
            onModelChange={changeModel}
            availableModels={availableModels}
            contextWindowSize={contextWindowSize}
            onWindowSizeChange={handleWindowSizeChange}
            disabled={!hasApiKey} // APIキーが未設定の場合は入力を無効化
          />
        </div>
      </div>
    </div>
  );
}