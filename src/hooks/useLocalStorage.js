// Generated by GitHub Copilot

import { useState, useEffect, useCallback, useRef } from 'react';

/**
 * ローカルストレージを扱うカスタムフック
 * ブラウザのローカルストレージにデータを永続化する機能を提供します
 * 
 * @param {string} key ローカルストレージのキー
 * @param {any} initialValue 初期値（ローカルストレージに値がない場合に使用）
 * @returns {Array} [storedValue, setValue, removeValue] 格納された値、値設定関数、値削除関数
 */
export function useLocalStorage(key, initialValue = null) {
  // 前回のキーを追跡するためのref
  const prevKeyRef = useRef(key);
  
  // 初期値を取得する関数（lazily）
  const getInitialValue = useCallback(() => {
    if (typeof window === 'undefined') {
      // SSR環境では動作しないためinitialValueを返す
      return initialValue;
    }

    try {
      // ローカルストレージから値を取得
      const item = localStorage.getItem(key);
      // 値が存在すればパースして返す、なければinitialValueを返す
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      // エラーが発生した場合はログを出力してinitialValueを返す
      console.error(`"${key}"の読み込みに失敗しました`, error);
      return initialValue;
    }
  }, [key, initialValue]);

  // 状態を管理
  const [storedValue, setStoredValue] = useState(getInitialValue);

  /**
   * ローカルストレージと状態の両方を更新する関数
   * @param {any} value 新しい値、または現在の値を受け取って新しい値を返す関数
   */
  const setValue = useCallback((value) => {
    if (typeof window === 'undefined') {
      console.warn('ローカルストレージはSSR環境では利用できません');
      return;
    }

    try {
      // 値が関数の場合は、現在値を引数にして実行
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      
      // 状態を更新
      setStoredValue(valueToStore);
      
      // ローカルストレージを更新
      if (valueToStore === null) {
        localStorage.removeItem(key);
      } else {
        localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      console.error(`"${key}"の保存に失敗しました`, error);
    }
  }, [key, storedValue]);

  /**
   * ローカルストレージから値を削除する関数
   */
  const removeValue = useCallback(() => {
    if (typeof window === 'undefined') {
      return;
    }

    try {
      // ローカルストレージから削除
      localStorage.removeItem(key);
      // 状態をnullに更新
      setStoredValue(initialValue);
    } catch (error) {
      console.error(`"${key}"の削除に失敗しました`, error);
    }
  }, [key, initialValue]);

  // キーが変更されたときに値を再読み込み
  useEffect(() => {
    // キーが変更された場合のみ値を再読み込み
    if (prevKeyRef.current !== key) {
      setStoredValue(getInitialValue());
      prevKeyRef.current = key;
    }
  }, [key, getInitialValue]);

  // window storage eventを監視して他のタブでの変更を検知
  useEffect(() => {
    if (typeof window === 'undefined') {
      return;
    }

    const handleStorageChange = (event) => {
      if (event.key === key) {
        try {
          const newValue = event.newValue ? JSON.parse(event.newValue) : initialValue;
          setStoredValue(newValue);
        } catch (error) {
          console.error(`ストレージイベントの処理に失敗しました: "${key}"`, error);
        }
      }
    };

    // storageイベントをリッスン
    window.addEventListener('storage', handleStorageChange);
    
    // クリーンアップ関数
    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, [key, initialValue]);

  return [storedValue, setValue, removeValue];
}